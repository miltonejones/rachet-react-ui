{"ast":null,"code":"var _jsxFileName = \"/home/miltonejones/projects/rachet-react-ui/src/components/DataGrid/DataGrid.js\";\nimport React from 'react';\nimport { Alert, Box } from '../UI/UI';\nimport './DataGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DataGrid(_ref) {\n  var _table$fields;\n\n  let {\n    table\n  } = _ref;\n  const maxWidth = '200px';\n\n  if (!(table !== null && table !== void 0 && table.fields)) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      children: [\"Could not read response. Please try again later\", /*#__PURE__*/_jsxDEV(Box, {\n        children: table.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"DataGrid\",\n    style: {\n      width: '100vw'\n    },\n    columns: table.fields.length,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: table === null || table === void 0 ? void 0 : (_table$fields = table.fields) === null || _table$fields === void 0 ? void 0 : _table$fields.map((k, i) => /*#__PURE__*/_jsxDEV(\"th\", {\n        className: \"cell\",\n        style: {\n          textAlign: 'left'\n        },\n        children: k.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), table.rows.map((row, r) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: Object.keys(row).map((cell, i) => /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"cell\",\n        style: {\n          maxWidth,\n          overflow: 'hidden'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-wrap\",\n          children: [' ', /*#__PURE__*/_jsxDEV(CellValue, {\n            value: row[cell]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this))\n    }, r, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_c = DataGrid;\n\nconst CellValue = _ref2 => {\n  let {\n    value\n  } = _ref2;\n  if (!value) return /*#__PURE__*/_jsxDEV(\"i\", {\n    children: \"empty\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 22\n  }, this);\n  if (typeof value === 'object') return JSON.stringify(value);\n  return value;\n};\n\n_c2 = CellValue;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DataGrid\");\n$RefreshReg$(_c2, \"CellValue\");","map":{"version":3,"sources":["/home/miltonejones/projects/rachet-react-ui/src/components/DataGrid/DataGrid.js"],"names":["React","Alert","Box","DataGrid","table","maxWidth","fields","error","width","length","map","k","i","textAlign","name","rows","row","r","Object","keys","cell","overflow","CellValue","value","JSON","stringify"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,QAA2B,UAA3B;AACA,OAAO,gBAAP;;AAEA,eAAe,SAASC,QAAT,OAA6B;AAAA;;AAAA,MAAX;AAAEC,IAAAA;AAAF,GAAW;AAC1C,QAAMC,QAAQ,GAAG,OAAjB;;AACA,MAAI,EAACD,KAAD,aAACA,KAAD,eAACA,KAAK,CAAEE,MAAR,CAAJ,EAAoB;AAClB,wBACE,QAAC,KAAD;AAAO,MAAA,QAAQ,EAAC,OAAhB;AAAA,iFAEE,QAAC,GAAD;AAAA,kBAAMF,KAAK,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AACD,sBACE;AACE,IAAA,SAAS,EAAC,UADZ;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAFT;AAGE,IAAA,OAAO,EAAEJ,KAAK,CAACE,MAAN,CAAaG,MAHxB;AAAA,4BAKE;AAAA,gBACGL,KADH,aACGA,KADH,wCACGA,KAAK,CAAEE,MADV,kDACG,cAAeI,GAAf,CAAmB,CAACC,CAAD,EAAIC,CAAJ,kBAClB;AAAI,QAAA,SAAS,EAAC,MAAd;AAAqB,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAA5B;AAAA,kBACGF,CAAC,CAACG;AADL;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YALF,EAYGV,KAAK,CAACW,IAAN,CAAWL,GAAX,CAAe,CAACM,GAAD,EAAMC,CAAN,kBACd;AAAA,gBACGC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBN,GAAjB,CAAqB,CAACU,IAAD,EAAOR,CAAP,kBACpB;AACE,QAAA,SAAS,EAAC,MADZ;AAEE,QAAA,KAAK,EAAE;AAAEP,UAAAA,QAAF;AAAYgB,UAAAA,QAAQ,EAAE;AAAtB,SAFT;AAAA,+BAKE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,qBACG,GADH,eAEE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAEL,GAAG,CAACI,IAAD;AAArB;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF,SAGOR,CAHP;AAAA;AAAA;AAAA;AAAA,cADD;AADH,OAASK,CAAT;AAAA;AAAA;AAAA;AAAA,YADD,CAZH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD;KAzCuBd,Q;;AA2CxB,MAAMmB,SAAS,GAAG,SAAe;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC/B,MAAI,CAACA,KAAL,EAAY,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACZ,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAOC,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAP;AAC/B,SAAOA,KAAP;AACD,CAJD;;MAAMD,S","sourcesContent":["import React from 'react';\r\nimport { Alert, Box } from '../UI/UI';\r\nimport './DataGrid.css';\r\n\r\nexport default function DataGrid({ table }) {\r\n  const maxWidth = '200px';\r\n  if (!table?.fields) {\r\n    return (\r\n      <Alert severity=\"error\">\r\n        Could not read response. Please try again later\r\n        <Box>{table.error}</Box>\r\n      </Alert>\r\n    );\r\n  }\r\n  return (\r\n    <table\r\n      className=\"DataGrid\"\r\n      style={{ width: '100vw' }}\r\n      columns={table.fields.length}\r\n    >\r\n      <thead>\r\n        {table?.fields?.map((k, i) => (\r\n          <th className=\"cell\" style={{ textAlign: 'left' }}>\r\n            {k.name}\r\n          </th>\r\n        ))}\r\n      </thead>\r\n      {table.rows.map((row, r) => (\r\n        <tr key={r}>\r\n          {Object.keys(row).map((cell, i) => (\r\n            <td\r\n              className=\"cell\"\r\n              style={{ maxWidth, overflow: 'hidden' }}\r\n              key={i}\r\n            >\r\n              <div className=\"no-wrap\">\r\n                {' '}\r\n                <CellValue value={row[cell]} />\r\n              </div>\r\n            </td>\r\n          ))}\r\n        </tr>\r\n      ))}\r\n    </table>\r\n  );\r\n}\r\n\r\nconst CellValue = ({ value }) => {\r\n  if (!value) return <i>empty</i>;\r\n  if (typeof value === 'object') return JSON.stringify(value);\r\n  return value;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}