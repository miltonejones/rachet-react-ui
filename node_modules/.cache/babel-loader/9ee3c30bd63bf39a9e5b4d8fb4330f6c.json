{"ast":null,"code":"var _jsxFileName = \"/home/miltonejones/projects/rachet-react-ui/src/components/ColumnForm/ColumnForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { TextBox, Card, Flex, Typography, Button, Switch, Box, Alert } from '../UI/UI';\nimport { Key, Lock } from '../../icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getType = type => {\n  const test = /(\\w+)\\((\\d+)\\)/.exec(type);\n  if (test) return {\n    type: test[1],\n    size: test[2]\n  };\n  return {\n    type\n  };\n};\n\nexport default function ColumnForm(_ref) {\n  _s();\n\n  let {\n    column: inputColumn\n  } = _ref;\n  const [column, setColumn] = React.useState(inputColumn);\n  React.useEffect(() => {\n    !!inputColumn && (column === null || column === void 0 ? void 0 : column.COLUMN_NAME) !== inputColumn.COLUMN_NAME && setColumn(inputColumn);\n  }, [column, inputColumn]);\n  if (!column) return /*#__PURE__*/_jsxDEV(\"i\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 23\n  }, this);\n\n  const update = (n, v) => setColumn({ ...column,\n    [n]: v\n  });\n\n  const dataType = getType(column.COLUMN_TYPE);\n  const rows = [{\n    caption: 'Name',\n    field: 'COLUMN_NAME',\n    value: column.COLUMN_NAME\n  }, {\n    caption: 'Type',\n    value: dataType.type\n  }, {\n    caption: 'Size',\n    value: dataType.size\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      mt: 5,\n      style: {\n        maxWidth: 325\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: [\"\\\"\", column.COLUMN_NAME, \"\\\" settings\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), !!column.CONSTRAINT_NAME && column.CONSTRAINT_NAME === 'PRIMARY' && /*#__PURE__*/_jsxDEV(Alert, {\n        icon: Key,\n        children: \"Primary Key\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), !!column.CONSTRAINT_NAME && column.CONSTRAINT_NAME !== 'PRIMARY' && /*#__PURE__*/_jsxDEV(Alert, {\n        icon: Lock,\n        mr: 2,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          children: [\"foreign key of\", ' ', /*#__PURE__*/_jsxDEV(\"i\", {\n            children: [' ', column.REFERENCED_TABLE_NAME, \".\", column.REFERENCED_COLUMN_NAME]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), rows.map(row => /*#__PURE__*/_jsxDEV(Flex, {\n        spacing: 1,\n        mr: 2,\n        column: true,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          children: row.caption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TextBox, {\n          placeholder: row.caption,\n          value: row.value,\n          onChange: e => !!row.field && update(row.field, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Flex, {\n        align: \"center\",\n        spacing: 1,\n        mr: 2,\n        children: [/*#__PURE__*/_jsxDEV(Switch, {\n          onChange: v => update('IS_NULLABLE', v ? 'YES' : 'NO'),\n          checked: column.IS_NULLABLE === 'YES'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), ' ', \"Allow null\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ColumnForm, \"Uw/51WKdig/iDOCZFUuguU/xV4g=\");\n\n_c = ColumnForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColumnForm\");","map":{"version":3,"sources":["/home/miltonejones/projects/rachet-react-ui/src/components/ColumnForm/ColumnForm.js"],"names":["React","TextBox","Card","Flex","Typography","Button","Switch","Box","Alert","Key","Lock","getType","type","test","exec","size","ColumnForm","column","inputColumn","setColumn","useState","useEffect","COLUMN_NAME","update","n","v","dataType","COLUMN_TYPE","rows","caption","field","value","maxWidth","CONSTRAINT_NAME","REFERENCED_TABLE_NAME","REFERENCED_COLUMN_NAME","map","row","e","target","IS_NULLABLE"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  TextBox,\r\n  Card,\r\n  Flex,\r\n  Typography,\r\n  Button,\r\n  Switch,\r\n  Box,\r\n  Alert,\r\n} from '../UI/UI';\r\nimport { Key, Lock } from '../../icons';\r\n\r\nconst getType = (type) => {\r\n  const test = /(\\w+)\\((\\d+)\\)/.exec(type);\r\n  if (test)\r\n    return {\r\n      type: test[1],\r\n      size: test[2],\r\n    };\r\n  return { type };\r\n};\r\n\r\nexport default function ColumnForm({ column: inputColumn }) {\r\n  const [column, setColumn] = React.useState(inputColumn);\r\n  React.useEffect(() => {\r\n    !!inputColumn &&\r\n      column?.COLUMN_NAME !== inputColumn.COLUMN_NAME &&\r\n      setColumn(inputColumn);\r\n  }, [column, inputColumn]);\r\n  if (!column) return <i />;\r\n  const update = (n, v) => setColumn({ ...column, [n]: v });\r\n  const dataType = getType(column.COLUMN_TYPE);\r\n  const rows = [\r\n    {\r\n      caption: 'Name',\r\n      field: 'COLUMN_NAME',\r\n      value: column.COLUMN_NAME,\r\n    },\r\n    {\r\n      caption: 'Type',\r\n      value: dataType.type,\r\n    },\r\n    {\r\n      caption: 'Size',\r\n      value: dataType.size,\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <Card mt={5} style={{ maxWidth: 325 }}>\r\n        <legend>\"{column.COLUMN_NAME}\" settings</legend>\r\n        {!!column.CONSTRAINT_NAME && column.CONSTRAINT_NAME === 'PRIMARY' && (\r\n          <Alert icon={Key}>Primary Key</Alert>\r\n        )}\r\n        {!!column.CONSTRAINT_NAME && column.CONSTRAINT_NAME !== 'PRIMARY' && (\r\n          <Alert icon={Lock} mr={2}>\r\n            <Box>\r\n              foreign key of{' '}\r\n              <i>\r\n                {' '}\r\n                {column.REFERENCED_TABLE_NAME}.{column.REFERENCED_COLUMN_NAME}\r\n              </i>\r\n            </Box>\r\n          </Alert>\r\n        )}\r\n        {rows.map((row) => (\r\n          <Flex spacing={1} mr={2} column>\r\n            <Typography variant=\"caption\">{row.caption}</Typography>\r\n            <TextBox\r\n              placeholder={row.caption}\r\n              value={row.value}\r\n              onChange={(e) => !!row.field && update(row.field, e.target.value)}\r\n            />\r\n          </Flex>\r\n        ))}\r\n        <Flex align=\"center\" spacing={1} mr={2}>\r\n          <Switch\r\n            onChange={(v) => update('IS_NULLABLE', v ? 'YES' : 'NO')}\r\n            checked={column.IS_NULLABLE === 'YES'}\r\n          />{' '}\r\n          Allow null\r\n        </Flex>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}