{"ast":null,"code":"var _jsxFileName = \"/home/miltonejones/projects/rachet-react-ui/src/components/QueryPane/QueryPane.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport { Play } from '../../icons';\nimport { TextBox, IconButton, Chip, Flex, Card, Select, Dialog, usePrompt } from '../UI/';\nimport { describeTable } from '../../hooks/useDbConnector';\nimport './QueryPane.css';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LazyMiltonContext = /*#__PURE__*/React.createContext({});\nconst EMPTY_CONFIGURATION = {\n  tables: [],\n  wheres: [],\n  orders: []\n};\nexport default function QueryPane(_ref) {\n  _s();\n\n  let {\n    config,\n    tableNames,\n    query,\n    setQuery,\n    execSQL\n  } = _ref;\n  const dialog = usePrompt();\n  const [configuration, setConfiguration] = React.useState(EMPTY_CONFIGURATION);\n  const createTSQL = React.useCallback(() => {\n    const {\n      tables\n    } = configuration;\n    const sql = ['SELECT'];\n    const cols = [];\n    const from = [];\n    tables.map((table, i) => {\n      var _table$join;\n\n      const {\n        destTable,\n        srcCol,\n        destCol\n      } = (_table$join = table.join) !== null && _table$join !== void 0 ? _table$join : {};\n      table.columns.filter(f => !!f.selected).map(col => cols.push(`${table.alias}.${col.name} as ${col.alias}`));\n      from.push(i === 0 ? `${table.name} as ${table.alias}` : `JOIN ${table.name} as ${table.alias} ON ${table.alias}.${srcCol} = ${destTable}.${destCol}`);\n    });\n    const o = [...sql, cols.join(', '), 'from', ...from].join(' ');\n    return o;\n  }, [configuration]);\n\n  const addTable = async name => {\n    const {\n      rows\n    } = await describeTable(config, name);\n    const columns = rows.map(col => ({\n      name: col.COLUMN_NAME,\n      alias: col.COLUMN_NAME\n    }));\n    const table = {\n      name,\n      alias: name,\n      columns\n    };\n    setConfiguration(f => ({ ...f,\n      tables: f.tables.map(v => v.name).indexOf(name) > -1 ? f.tables.filter(t => t.name !== name) : f.tables.concat(table)\n    }));\n  };\n\n  const findTable = name => configuration.tables.find(n => n.name === name);\n\n  const updateTable = table => setConfiguration(f => ({ ...f,\n    tables: f.tables.map(t => t.name === table.name ? table : t)\n  }));\n\n  const editTable = async (name, edit) => {\n    const table = findTable(name);\n    await edit(table);\n    updateTable(table);\n  };\n\n  const editColumn = async (name, field, edit) => {\n    editTable(name, async table => {\n      const column = table.columns.find(c => c.name === field);\n      await edit(column, table);\n      table.columns = table.columns.map(c => c.name === column.name ? column : c);\n    });\n  };\n\n  const setTableAlias = name => {\n    editTable(name, async table => {\n      const alias = await dialog.Prompt(`Enter an alias for ${name}`, table.alias);\n      if (!alias) return;\n      Object.assign(table, {\n        alias\n      });\n    });\n  };\n\n  const setColumnAlias = (name, field) => {\n    editColumn(name, field, async col => {\n      const alias = await dialog.Prompt(`Enter an alias for ${col.name}`, col.alias);\n      if (!alias) return;\n      Object.assign(col, {\n        alias\n      });\n    });\n  };\n\n  const setColumnSelected = (name, field) => {\n    editColumn(name, field, col => {\n      Object.assign(col, {\n        selected: !col.selected\n      });\n    });\n  };\n\n  const setTableJoin = (name, field, value) => {\n    editTable(name, table => {\n      var _table$join2;\n\n      const join = (_table$join2 = table.join) !== null && _table$join2 !== void 0 ? _table$join2 : {};\n      Object.assign(join, {\n        [field]: value\n      });\n      Object.assign(table, {\n        join\n      });\n    });\n  };\n\n  const setBuilderSQL = React.useCallback(() => {\n    const sql = createTSQL(configuration);\n    setQuery(sql);\n  }, [configuration]);\n  const queryTextBoxArgs = {\n    configuration,\n    value: query,\n    onChange: w => setQuery(w.target.value)\n  };\n  React.useEffect(() => {\n    console.log('Updating SQL');\n    setBuilderSQL();\n  }, [setBuilderSQL]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      children: [' ', /*#__PURE__*/_jsxDEV(LazyMiltonContext.Provider, {\n        value: {\n          setTableAlias,\n          setTableJoin,\n          setColumnAlias,\n          setColumnSelected,\n          ...configuration\n        },\n        children: /*#__PURE__*/_jsxDEV(QueryTextBox, { ...queryTextBoxArgs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        mt: 2,\n        onClick: () => {\n          const sql = createTSQL(configuration);\n          const actual = configuration.tables.length ? sql : query;\n          setConfiguration(EMPTY_CONFIGURATION);\n          execSQL(actual);\n        },\n        children: /*#__PURE__*/_jsxDEV(Play, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      mt: 2,\n      sx: {\n        width: '100%'\n      },\n      wrap: true,\n      children: tableNames === null || tableNames === void 0 ? void 0 : tableNames.map(v => /*#__PURE__*/_jsxDEV(Chip, {\n        color: \"secondary\",\n        variant: configuration.tables.some(f => f.name === v) ? 'filled' : 'outlined',\n        mr: 2,\n        mb: 2,\n        onClick: () => addTable(v),\n        children: v\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), ' ', /*#__PURE__*/_jsxDEV(Dialog, { ...dialog.state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n/****************************************************************************************************\r\n *                                      QueryPane Components\r\n ****************************************************************************************************/\n\n_s(QueryPane, \"q37+C5vHoIb6JTec+2aCXoT8azM=\", false, function () {\n  return [usePrompt];\n});\n\n_c = QueryPane;\n\nconst QueryFieldName = _ref2 => {\n  _s2();\n\n  let {\n    table,\n    name,\n    alias,\n    last = false\n  } = _ref2;\n  const {\n    setTableAlias,\n    setColumnAlias,\n    setColumnSelected\n  } = React.useContext(LazyMiltonContext);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"snap\",\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      className: \"x\",\n      onClick: () => setColumnSelected(table.name, name),\n      children: \"x\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"u\", {\n      className: \"link\",\n      onClick: () => setTableAlias(table.name),\n      children: table.alias\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), \".\", /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: name\n    }, void 0, false), ' ', /*#__PURE__*/_jsxDEV(\"i\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"as\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), ' ', /*#__PURE__*/_jsxDEV(\"u\", {\n      className: \"link\",\n      onClick: () => setColumnAlias(table.name, name),\n      children: alias\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), !last && ',']\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(QueryFieldName, \"zKH+MyBS6Lo5HeSHHYPymhhTpJo=\");\n\n_c2 = QueryFieldName;\n\nconst QueryFieldList = _ref3 => {\n  let {\n    tables,\n    filter = f => !!f.selected\n  } = _ref3;\n  return tables.map((table, t) => table.columns.filter(filter).map((column, i) => /*#__PURE__*/_jsxDEV(QueryFieldName, {\n    table: table,\n    ...column,\n    last: t === tables.length - 1 && i === table.columns.filter(filter).length - 1\n  }, column.name + table.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 9\n  }, this)));\n};\n\n_c3 = QueryFieldList;\n\nconst QueryJoinStatement = _ref4 => {\n  _s3();\n\n  let {\n    name,\n    alias,\n    destTable,\n    srcCol,\n    destCol\n  } = _ref4;\n  const [edit, setEdit] = React.useState({\n    a: !1,\n    b: !1,\n    c: !1\n  });\n\n  const toggle = v => setEdit(s => ({ ...s,\n    [v]: !s[v]\n  }));\n\n  const {\n    setTableJoin,\n    tables\n  } = React.useContext(LazyMiltonContext);\n  const dest = tables.find(t => t.name === destTable);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [' ', \"JOIN \", /*#__PURE__*/_jsxDEV(TableAlias, {\n      name: name,\n      alias: alias\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 12\n    }, this), ' ', /*#__PURE__*/_jsxDEV(\"i\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"ON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), ' ', alias, \".\", /*#__PURE__*/_jsxDEV(ColumnEditField, {\n      name: name,\n      open: edit.a,\n      value: srcCol,\n      toggle: () => toggle('a'),\n      onChange: v => {\n        setTableJoin(name, 'srcCol', v);\n        toggle('a');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), ' ', \"=\", ' ', /*#__PURE__*/_jsxDEV(TableEditField, {\n      open: edit.b,\n      value: destTable,\n      display: dest === null || dest === void 0 ? void 0 : dest.alias,\n      toggle: () => toggle('b'),\n      onChange: v => {\n        setTableJoin(name, 'destTable', v);\n        toggle('b');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), \".\", /*#__PURE__*/_jsxDEV(ColumnEditField, {\n      name: destTable,\n      open: edit.c,\n      value: destCol,\n      toggle: () => toggle('c'),\n      onChange: v => {\n        setTableJoin(name, 'destCol', v);\n        toggle('c');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s3(QueryJoinStatement, \"fQQzeTIzlou29UTUzflchm3rpb8=\");\n\n_c4 = QueryJoinStatement;\n\nfunction ColumnEditField(_ref5) {\n  let {\n    open,\n    name,\n    onChange,\n    toggle,\n    value\n  } = _ref5;\n\n  if (open) {\n    return /*#__PURE__*/_jsxDEV(ColumnList, {\n      name: name,\n      value: value,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"u\", {\n    className: \"link red\",\n    onClick: toggle,\n    children: value || 'set field'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n}\n\n_c5 = ColumnEditField;\n\nfunction TableEditField(_ref6) {\n  let {\n    open,\n    onChange,\n    toggle,\n    value,\n    display\n  } = _ref6;\n\n  if (open) {\n    return /*#__PURE__*/_jsxDEV(TableList, {\n      value: value,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"u\", {\n    className: \"link red\",\n    onClick: toggle,\n    children: display || value || 'set table'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 5\n  }, this);\n}\n\n_c6 = TableEditField;\n\nconst TableList = _ref7 => {\n  _s4();\n\n  let {\n    onChange,\n    value\n  } = _ref7;\n  const {\n    tables\n  } = React.useContext(LazyMiltonContext);\n  return /*#__PURE__*/_jsxDEV(Select, {\n    value: value,\n    onChange: e => onChange(e.target.value),\n    label: \"Choose table\",\n    options: tables.map(f => f.name)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n};\n\n_s4(TableList, \"Y94E6KgjZABtBloLSIiijt09+dE=\");\n\n_c7 = TableList;\n\nconst ColumnList = _ref8 => {\n  _s5();\n\n  let {\n    name,\n    onChange,\n    value\n  } = _ref8;\n  const {\n    tables\n  } = React.useContext(LazyMiltonContext);\n  if (!name) return /*#__PURE__*/_jsxDEV(\"i\", {\n    children: \"table not set\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 21\n  }, this);\n  const {\n    columns\n  } = tables.find(f => f.name === name);\n  return /*#__PURE__*/_jsxDEV(Select, {\n    value: value,\n    onChange: e => onChange(e.target.value),\n    label: \"Choose column\",\n    options: columns.map(f => f.name)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n};\n\n_s5(ColumnList, \"Y94E6KgjZABtBloLSIiijt09+dE=\");\n\n_c8 = ColumnList;\n\nconst TableAlias = _ref9 => {\n  _s6();\n\n  let {\n    name,\n    alias\n  } = _ref9;\n  const {\n    setTableAlias\n  } = React.useContext(LazyMiltonContext);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [' ', name, ' ', /*#__PURE__*/_jsxDEV(\"i\", {\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"as\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this), ' ', /*#__PURE__*/_jsxDEV(\"u\", {\n      className: \"link\",\n      onClick: () => setTableAlias(name),\n      children: alias\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s6(TableAlias, \"ktbwu+SQJxbZTqOgpcV2f/OS//g=\");\n\n_c9 = TableAlias;\n\nconst QueryTableName = _ref10 => {\n  let {\n    join,\n    name,\n    alias,\n    first = false\n  } = _ref10;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!first && /*#__PURE__*/_jsxDEV(QueryJoinStatement, {\n      name: name,\n      alias: alias,\n      ...join\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 18\n    }, this), !!first && /*#__PURE__*/_jsxDEV(TableAlias, {\n      name: name,\n      alias: alias\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true);\n};\n\n_c10 = QueryTableName;\n\nconst QueryTableList = _ref11 => {\n  let {\n    tables\n  } = _ref11;\n  return tables.map((table, t) => /*#__PURE__*/_jsxDEV(QueryTableName, { ...table,\n    first: t === 0\n  }, table.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this));\n};\n\n_c11 = QueryTableList;\n\nconst QueryTextBox = _ref12 => {\n  let {\n    configuration,\n    value,\n    onChange\n  } = _ref12;\n  const {\n    tables,\n    wheres,\n    orders\n  } = configuration;\n\n  if (tables.length) {\n    const excluded = tables.filter(f => !f.selected);\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      wrap: true,\n      sx: {\n        lineHeight: 1.5,\n        maxWidth: 'calc(100vw - 500px)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"code\", {\n        children: [' ', \"SELECT \", /*#__PURE__*/_jsxDEV(QueryFieldList, {\n          tables: tables\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 18\n        }, this), \" FROM\", ' ', /*#__PURE__*/_jsxDEV(QueryTableList, {\n          tables: tables\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Available fields\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QueryFieldList, {\n          tables: tables,\n          filter: f => !f.selected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TextBox, {\n    multiple: true,\n    sx: {\n      width: '85%'\n    },\n    mr: 8,\n    rows: 3,\n    value: value,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, this);\n};\n\n_c12 = QueryTextBox;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n\n$RefreshReg$(_c, \"QueryPane\");\n$RefreshReg$(_c2, \"QueryFieldName\");\n$RefreshReg$(_c3, \"QueryFieldList\");\n$RefreshReg$(_c4, \"QueryJoinStatement\");\n$RefreshReg$(_c5, \"ColumnEditField\");\n$RefreshReg$(_c6, \"TableEditField\");\n$RefreshReg$(_c7, \"TableList\");\n$RefreshReg$(_c8, \"ColumnList\");\n$RefreshReg$(_c9, \"TableAlias\");\n$RefreshReg$(_c10, \"QueryTableName\");\n$RefreshReg$(_c11, \"QueryTableList\");\n$RefreshReg$(_c12, \"QueryTextBox\");","map":{"version":3,"sources":["/home/miltonejones/projects/rachet-react-ui/src/components/QueryPane/QueryPane.js"],"names":["Play","TextBox","IconButton","Chip","Flex","Card","Select","Dialog","usePrompt","describeTable","React","LazyMiltonContext","createContext","EMPTY_CONFIGURATION","tables","wheres","orders","QueryPane","config","tableNames","query","setQuery","execSQL","dialog","configuration","setConfiguration","useState","createTSQL","useCallback","sql","cols","from","map","table","i","destTable","srcCol","destCol","join","columns","filter","f","selected","col","push","alias","name","o","addTable","rows","COLUMN_NAME","v","indexOf","t","concat","findTable","find","n","updateTable","editTable","edit","editColumn","field","column","c","setTableAlias","Prompt","Object","assign","setColumnAlias","setColumnSelected","setTableJoin","value","setBuilderSQL","queryTextBoxArgs","onChange","w","target","useEffect","console","log","actual","length","width","some","state","QueryFieldName","last","useContext","QueryFieldList","QueryJoinStatement","setEdit","a","b","toggle","s","dest","ColumnEditField","open","TableEditField","display","TableList","e","ColumnList","TableAlias","QueryTableName","first","QueryTableList","QueryTextBox","excluded","lineHeight","maxWidth"],"mappings":"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","sourcesContent":["import { Play } from '../../icons';\r\nimport {\r\n  TextBox,\r\n  IconButton,\r\n  Chip,\r\n  Flex,\r\n  Card,\r\n  Select,\r\n  Dialog,\r\n  usePrompt,\r\n} from '../UI/';\r\nimport { describeTable } from '../../hooks/useDbConnector';\r\nimport './QueryPane.css';\r\nimport React from 'react';\r\n\r\nconst LazyMiltonContext = React.createContext({});\r\n\r\nconst EMPTY_CONFIGURATION = {\r\n  tables: [],\r\n  wheres: [],\r\n  orders: [],\r\n};\r\n\r\nexport default function QueryPane({\r\n  config,\r\n  tableNames,\r\n  query,\r\n  setQuery,\r\n  execSQL,\r\n}) {\r\n  const dialog = usePrompt();\r\n  const [configuration, setConfiguration] = React.useState(EMPTY_CONFIGURATION);\r\n  const createTSQL = React.useCallback(() => {\r\n    const { tables } = configuration;\r\n    const sql = ['SELECT'];\r\n    const cols = [];\r\n    const from = [];\r\n    tables.map((table, i) => {\r\n      const { destTable, srcCol, destCol } = table.join ?? {};\r\n      table.columns\r\n        .filter((f) => !!f.selected)\r\n        .map((col) => cols.push(`${table.alias}.${col.name} as ${col.alias}`));\r\n      from.push(\r\n        i === 0\r\n          ? `${table.name} as ${table.alias}`\r\n          : `JOIN ${table.name} as ${table.alias} ON ${table.alias}.${srcCol} = ${destTable}.${destCol}`\r\n      );\r\n    });\r\n    const o = [...sql, cols.join(', '), 'from', ...from].join(' ');\r\n    return o;\r\n  }, [configuration]);\r\n\r\n  const addTable = async (name) => {\r\n    const { rows } = await describeTable(config, name);\r\n    const columns = rows.map((col) => ({\r\n      name: col.COLUMN_NAME,\r\n      alias: col.COLUMN_NAME,\r\n    }));\r\n    const table = { name, alias: name, columns };\r\n    setConfiguration((f) => ({\r\n      ...f,\r\n      tables:\r\n        f.tables.map((v) => v.name).indexOf(name) > -1\r\n          ? f.tables.filter((t) => t.name !== name)\r\n          : f.tables.concat(table),\r\n    }));\r\n  };\r\n\r\n  const findTable = (name) => configuration.tables.find((n) => n.name === name);\r\n\r\n  const updateTable = (table) =>\r\n    setConfiguration((f) => ({\r\n      ...f,\r\n      tables: f.tables.map((t) => (t.name === table.name ? table : t)),\r\n    }));\r\n\r\n  const editTable = async (name, edit) => {\r\n    const table = findTable(name);\r\n    await edit(table);\r\n    updateTable(table);\r\n  };\r\n\r\n  const editColumn = async (name, field, edit) => {\r\n    editTable(name, async (table) => {\r\n      const column = table.columns.find((c) => c.name === field);\r\n      await edit(column, table);\r\n      table.columns = table.columns.map((c) =>\r\n        c.name === column.name ? column : c\r\n      );\r\n    });\r\n  };\r\n\r\n  const setTableAlias = (name) => {\r\n    editTable(name, async (table) => {\r\n      const alias = await dialog.Prompt(\r\n        `Enter an alias for ${name}`,\r\n        table.alias\r\n      );\r\n      if (!alias) return;\r\n      Object.assign(table, { alias });\r\n    });\r\n  };\r\n\r\n  const setColumnAlias = (name, field) => {\r\n    editColumn(name, field, async (col) => {\r\n      const alias = await dialog.Prompt(\r\n        `Enter an alias for ${col.name}`,\r\n        col.alias\r\n      );\r\n      if (!alias) return;\r\n      Object.assign(col, { alias });\r\n    });\r\n  };\r\n\r\n  const setColumnSelected = (name, field) => {\r\n    editColumn(name, field, (col) => {\r\n      Object.assign(col, { selected: !col.selected });\r\n    });\r\n  };\r\n\r\n  const setTableJoin = (name, field, value) => {\r\n    editTable(name, (table) => {\r\n      const join = table.join ?? {};\r\n      Object.assign(join, { [field]: value });\r\n      Object.assign(table, { join });\r\n    });\r\n  };\r\n\r\n  const setBuilderSQL = React.useCallback(() => {\r\n    const sql = createTSQL(configuration);\r\n    setQuery(sql);\r\n  }, [configuration]);\r\n\r\n  const queryTextBoxArgs = {\r\n    configuration,\r\n    value: query,\r\n    onChange: (w) => setQuery(w.target.value),\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    console.log('Updating SQL');\r\n    setBuilderSQL();\r\n  }, [setBuilderSQL]);\r\n\r\n  return (\r\n    <>\r\n      <Flex>\r\n        {' '}\r\n        <LazyMiltonContext.Provider\r\n          value={{\r\n            setTableAlias,\r\n            setTableJoin,\r\n            setColumnAlias,\r\n            setColumnSelected,\r\n            ...configuration,\r\n          }}\r\n        >\r\n          <QueryTextBox {...queryTextBoxArgs} />\r\n        </LazyMiltonContext.Provider>\r\n        <IconButton\r\n          mt={2}\r\n          onClick={() => {\r\n            const sql = createTSQL(configuration);\r\n            const actual = configuration.tables.length ? sql : query;\r\n            setConfiguration(EMPTY_CONFIGURATION);\r\n            execSQL(actual);\r\n          }}\r\n        >\r\n          <Play />\r\n        </IconButton>\r\n      </Flex>\r\n      <Flex mt={2} sx={{ width: '100%' }} wrap>\r\n        {tableNames?.map((v) => (\r\n          <Chip\r\n            color=\"secondary\"\r\n            variant={\r\n              configuration.tables.some((f) => f.name === v)\r\n                ? 'filled'\r\n                : 'outlined'\r\n            }\r\n            mr={2}\r\n            mb={2}\r\n            onClick={() => addTable(v)}\r\n          >\r\n            {v}\r\n          </Chip>\r\n        ))}\r\n      </Flex>{' '}\r\n      <Dialog {...dialog.state} />\r\n    </>\r\n  );\r\n}\r\n\r\n/****************************************************************************************************\r\n *                                      QueryPane Components\r\n ****************************************************************************************************/\r\n\r\nconst QueryFieldName = ({ table, name, alias, last = false }) => {\r\n  const { setTableAlias, setColumnAlias, setColumnSelected } =\r\n    React.useContext(LazyMiltonContext);\r\n\r\n  return (\r\n    <span className=\"snap\">\r\n      <a className=\"x\" onClick={() => setColumnSelected(table.name, name)}>\r\n        x\r\n      </a>\r\n      <u className=\"link\" onClick={() => setTableAlias(table.name)}>\r\n        {table.alias}\r\n      </u>\r\n      .<>{name}</>{' '}\r\n      <i>\r\n        <b>as</b>\r\n      </i>{' '}\r\n      <u className=\"link\" onClick={() => setColumnAlias(table.name, name)}>\r\n        {alias}\r\n      </u>\r\n      {!last && ','}\r\n    </span>\r\n  );\r\n};\r\n\r\nconst QueryFieldList = ({ tables, filter = (f) => !!f.selected }) => {\r\n  return tables.map((table, t) =>\r\n    table.columns\r\n      .filter(filter)\r\n      .map((column, i) => (\r\n        <QueryFieldName\r\n          key={column.name + table.name}\r\n          table={table}\r\n          {...column}\r\n          last={\r\n            t === tables.length - 1 &&\r\n            i === table.columns.filter(filter).length - 1\r\n          }\r\n        />\r\n      ))\r\n  );\r\n};\r\n\r\nconst QueryJoinStatement = ({ name, alias, destTable, srcCol, destCol }) => {\r\n  const [edit, setEdit] = React.useState({ a: !1, b: !1, c: !1 });\r\n  const toggle = (v) => setEdit((s) => ({ ...s, [v]: !s[v] }));\r\n  const { setTableJoin, tables } = React.useContext(LazyMiltonContext);\r\n  const dest = tables.find((t) => t.name === destTable);\r\n  return (\r\n    <>\r\n      {' '}\r\n      JOIN <TableAlias name={name} alias={alias} />{' '}\r\n      <i>\r\n        <b>ON</b>\r\n      </i>{' '}\r\n      {alias}.\r\n      <ColumnEditField\r\n        name={name}\r\n        open={edit.a}\r\n        value={srcCol}\r\n        toggle={() => toggle('a')}\r\n        onChange={(v) => {\r\n          setTableJoin(name, 'srcCol', v);\r\n          toggle('a');\r\n        }}\r\n      />{' '}\r\n      ={' '}\r\n      <TableEditField\r\n        open={edit.b}\r\n        value={destTable}\r\n        display={dest?.alias}\r\n        toggle={() => toggle('b')}\r\n        onChange={(v) => {\r\n          setTableJoin(name, 'destTable', v);\r\n          toggle('b');\r\n        }}\r\n      />\r\n      .\r\n      <ColumnEditField\r\n        name={destTable}\r\n        open={edit.c}\r\n        value={destCol}\r\n        toggle={() => toggle('c')}\r\n        onChange={(v) => {\r\n          setTableJoin(name, 'destCol', v);\r\n          toggle('c');\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nfunction ColumnEditField({ open, name, onChange, toggle, value }) {\r\n  if (open) {\r\n    return <ColumnList name={name} value={value} onChange={onChange} />;\r\n  }\r\n  return (\r\n    <u className=\"link red\" onClick={toggle}>\r\n      {value || 'set field'}\r\n    </u>\r\n  );\r\n}\r\n\r\nfunction TableEditField({ open, onChange, toggle, value, display }) {\r\n  if (open) {\r\n    return <TableList value={value} onChange={onChange} />;\r\n  }\r\n  return (\r\n    <u className=\"link red\" onClick={toggle}>\r\n      {display || value || 'set table'}\r\n    </u>\r\n  );\r\n}\r\n\r\nconst TableList = ({ onChange, value }) => {\r\n  const { tables } = React.useContext(LazyMiltonContext);\r\n  return (\r\n    <Select\r\n      value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      label=\"Choose table\"\r\n      options={tables.map((f) => f.name)}\r\n    />\r\n  );\r\n};\r\n\r\nconst ColumnList = ({ name, onChange, value }) => {\r\n  const { tables } = React.useContext(LazyMiltonContext);\r\n  if (!name) return <i>table not set</i>;\r\n  const { columns } = tables.find((f) => f.name === name);\r\n  return (\r\n    <Select\r\n      value={value}\r\n      onChange={(e) => onChange(e.target.value)}\r\n      label=\"Choose column\"\r\n      options={columns.map((f) => f.name)}\r\n    />\r\n  );\r\n};\r\n\r\nconst TableAlias = ({ name, alias }) => {\r\n  const { setTableAlias } = React.useContext(LazyMiltonContext);\r\n  return (\r\n    <>\r\n      {' '}\r\n      {name}{' '}\r\n      <i>\r\n        <b>as</b>\r\n      </i>{' '}\r\n      <u className=\"link\" onClick={() => setTableAlias(name)}>\r\n        {alias}\r\n      </u>\r\n    </>\r\n  );\r\n};\r\n\r\nconst QueryTableName = ({ join, name, alias, first = false }) => {\r\n  return (\r\n    <>\r\n      {!first && <QueryJoinStatement name={name} alias={alias} {...join} />}\r\n      {!!first && <TableAlias name={name} alias={alias} />}\r\n    </>\r\n  );\r\n};\r\n\r\nconst QueryTableList = ({ tables }) => {\r\n  return tables.map((table, t) => (\r\n    <QueryTableName key={table.name} {...table} first={t === 0} />\r\n  ));\r\n};\r\n\r\nconst QueryTextBox = ({ configuration, value, onChange }) => {\r\n  const { tables, wheres, orders } = configuration;\r\n  if (tables.length) {\r\n    const excluded = tables.filter((f) => !f.selected);\r\n    return (\r\n      <Flex wrap sx={{ lineHeight: 1.5, maxWidth: 'calc(100vw - 500px)' }}>\r\n        <code>\r\n          {' '}\r\n          SELECT <QueryFieldList tables={tables} /> FROM{' '}\r\n          <QueryTableList tables={tables} />\r\n        </code>\r\n        <Card>\r\n          <legend>Available fields</legend>\r\n          <QueryFieldList tables={tables} filter={(f) => !f.selected} />\r\n        </Card>\r\n      </Flex>\r\n    );\r\n  }\r\n  return (\r\n    <TextBox\r\n      multiple\r\n      sx={{ width: '85%' }}\r\n      mr={8}\r\n      rows={3}\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}