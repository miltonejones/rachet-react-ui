{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { connectToDb, openTable, describeTable, execQuery } from './useDbConnector';\nimport { useSnackbar } from '../components/UI';\n\nconst getConfigs = () => {\n  var _localStorage$getItem;\n\n  return JSON.parse((_localStorage$getItem = localStorage.getItem('mysql-configs')) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '{}');\n};\n\nconst setConfigs = json => localStorage.setItem('mysql-configs', JSON.stringify(json));\n\nexport const collate = (length, pageSize, page) => {\n  const startPage = (page - 1) * pageSize;\n  return {\n    startPage,\n    page,\n    pageSize,\n    length\n  };\n};\nexport default function useApp() {\n  _s();\n\n  const [state, setState] = React.useState({\n    ratchet: !1,\n    page: 1,\n    configs: getConfigs(),\n    sidebarOpen: !0\n  });\n  const [settings, setSettings] = React.useState({\n    connect: !0\n  });\n\n  const changeState = (key, value) => setState(s => ({ ...s,\n    [key]: value\n  }));\n\n  const {\n    tableName,\n    table,\n    tableDesc,\n    tableNames,\n    page\n  } = state;\n\n  const setTableName = value => changeState('tableName', value);\n\n  const setTable = value => changeState('table', value);\n\n  const setTableDesc = value => changeState('tableDesc', value);\n\n  const setTableNames = value => changeState('tableNames', value);\n\n  const setPage = value => changeState('page', value);\n\n  const {\n    snackState,\n    say\n  } = useSnackbar();\n\n  const save = input => {\n    const {\n      title,\n      connect,\n      ...config\n    } = input;\n    if (!title) return alert('You must enter a Connection Name');\n    const configs = getConfigs();\n    Object.assign(configs, {\n      [title]: { ...config,\n        connect\n      }\n    });\n    setConfigs(configs);\n    console.log({\n      configs\n    });\n    !!connect && openDb(config);\n  };\n\n  React.useEffect(() => {\n    document.title = 'Ratchet-UI Demo Project';\n    const conf = localStorage.getItem('config');\n    const confs = getConfigs();\n    console.log({\n      conf,\n      confs\n    });\n    if (!conf) return console.log('no conf');\n    setSettings(JSON.parse(conf));\n    if (!confs) return console.log('no confs');\n    setState({ ...state,\n      configs: confs\n    });\n  }, []);\n\n  const openDb = async s => {\n    changeState('busy', !0);\n    const res = await connectToDb(s);\n    const tables = res.rows.map(f => f[Object.keys(f)[0]]);\n    setTableNames(tables);\n    changeState('busy', !1);\n    say('Loaded ' + s.database);\n  };\n\n  const clearTable = () => {\n    if (!!tableName) {\n      setTableName(null);\n      setTable(null);\n      setState({\n        configs: getConfigs(),\n        sidebarOpen: state.sidebarOpen,\n        tableNames: state.tableNames\n      });\n      return;\n    }\n  };\n\n  const getColumn = columnName => {\n    var _tableDesc$rows;\n\n    const is = !!state.columnName;\n    setState({ ...state,\n      selectedColumn: is ? null : tableDesc === null || tableDesc === void 0 ? void 0 : (_tableDesc$rows = tableDesc.rows) === null || _tableDesc$rows === void 0 ? void 0 : _tableDesc$rows.find(f => f.COLUMN_NAME === columnName),\n      columnName: is ? null : columnName\n    });\n  };\n\n  const getTable = async (s, p) => {\n    changeState('busy', !0);\n    const res = await openTable(settings, s, p);\n    setTableName(s);\n    setTable(res);\n    setPage(p);\n    const des = await describeTable(settings, s, p);\n    console.log(des);\n    setTableDesc(des);\n    changeState('busy', !1);\n  };\n\n  const execSQL = async function (queryText) {\n    let p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    changeState('busy', !0);\n    const res = await execQuery(settings, queryText, p);\n    console.log(res);\n    setState({ ...state,\n      queryText\n    });\n    setTableName('New Query');\n    setTable(res);\n    setTableDesc({\n      rows: res.fields.map(f => ({\n        COLUMN_NAME: f.name,\n        DATA_TYPE: f.type\n      }))\n    });\n    setPage(p);\n    changeState('busy', !1);\n  };\n\n  const openConnection = key => {\n    const connectionConfig = state.configs[key];\n    const {\n      title,\n      connect,\n      ...config\n    } = connectionConfig;\n    setSettings(config);\n    setState(s => ({ ...s,\n      connectionName: key\n    }));\n    openDb(config);\n  };\n\n  const getPage = o => {\n    if (state.newQuery) {\n      return execSQL(state.queryText, page + o);\n    }\n\n    getTable(tableName, page + o);\n  };\n\n  const paginationParams = collate(table === null || table === void 0 ? void 0 : table.count, 100, page);\n  const maxWidth = '200px';\n  const columnListArgs = {\n    tableName,\n    state,\n    getColumn,\n    columns: tableDesc === null || tableDesc === void 0 ? void 0 : tableDesc.rows\n  };\n  const tableListArgs = {\n    state,\n    setState,\n    tableName,\n    tableNames,\n    getTable,\n    clearTable,\n    setTableNames\n  };\n  const connectionListArgs = {\n    state,\n    setState,\n    openConnection\n  };\n  const connectionFormArgs = {\n    onSave: save,\n    setState: setSettings,\n    state: settings\n  };\n  const queryPaneArgs = {\n    tableNames,\n    execSQL,\n    config: settings,\n    query: state.queryText,\n    setQuery: w => setState(s => ({ ...s,\n      queryText: w\n    }))\n  };\n  const sidebarWidth = state.sidebarOpen ? '25%' : '64px';\n  const viewPaneCss = {\n    '--sidebar-width': sidebarWidth,\n    '--sidebar-min-width': state.sidebarOpen ? '356px' : '0'\n  };\n  const collapseHeight = 'calc(100vh - var(--margin-offset))';\n  return {\n    collapseHeight,\n    columnListArgs,\n    connectionFormArgs,\n    connectionListArgs,\n    getPage,\n    paginationParams,\n    queryPaneArgs,\n    setState,\n    state,\n    table,\n    tableDesc,\n    tableListArgs,\n    tableName,\n    tableNames,\n    viewPaneCss,\n    snackState,\n    say\n  };\n}\n\n_s(useApp, \"1tMkqfmp78TnYylcuSu2I6IItMs=\", false, function () {\n  return [useSnackbar];\n});","map":{"version":3,"sources":["/home/miltonejones/projects/rachet-react-ui/src/hooks/useApp.js"],"names":["React","connectToDb","openTable","describeTable","execQuery","useSnackbar","getConfigs","JSON","parse","localStorage","getItem","setConfigs","json","setItem","stringify","collate","length","pageSize","page","startPage","useApp","state","setState","useState","ratchet","configs","sidebarOpen","settings","setSettings","connect","changeState","key","value","s","tableName","table","tableDesc","tableNames","setTableName","setTable","setTableDesc","setTableNames","setPage","snackState","say","save","input","title","config","alert","Object","assign","console","log","openDb","useEffect","document","conf","confs","res","tables","rows","map","f","keys","database","clearTable","getColumn","columnName","is","selectedColumn","find","COLUMN_NAME","getTable","p","des","execSQL","queryText","fields","name","DATA_TYPE","type","openConnection","connectionConfig","connectionName","getPage","o","newQuery","paginationParams","count","maxWidth","columnListArgs","columns","tableListArgs","connectionListArgs","connectionFormArgs","onSave","queryPaneArgs","query","setQuery","w","sidebarWidth","viewPaneCss","collapseHeight"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  connectToDb,\r\n  openTable,\r\n  describeTable,\r\n  execQuery,\r\n} from './useDbConnector';\r\n\r\nimport { useSnackbar } from '../components/UI';\r\n\r\nconst getConfigs = () =>\r\n  JSON.parse(localStorage.getItem('mysql-configs') ?? '{}');\r\n\r\nconst setConfigs = (json) =>\r\n  localStorage.setItem('mysql-configs', JSON.stringify(json));\r\n\r\nexport const collate = (length, pageSize, page) => {\r\n  const startPage = (page - 1) * pageSize;\r\n  return {\r\n    startPage,\r\n    page,\r\n    pageSize,\r\n    length,\r\n  };\r\n};\r\n\r\nexport default function useApp() {\r\n  const [state, setState] = React.useState({\r\n    ratchet: !1,\r\n    page: 1,\r\n    configs: getConfigs(),\r\n    sidebarOpen: !0,\r\n  });\r\n  const [settings, setSettings] = React.useState({ connect: !0 });\r\n\r\n  const changeState = (key, value) => setState((s) => ({ ...s, [key]: value }));\r\n  const { tableName, table, tableDesc, tableNames, page } = state;\r\n  const setTableName = (value) => changeState('tableName', value);\r\n  const setTable = (value) => changeState('table', value);\r\n  const setTableDesc = (value) => changeState('tableDesc', value);\r\n  const setTableNames = (value) => changeState('tableNames', value);\r\n  const setPage = (value) => changeState('page', value);\r\n  const { snackState, say } = useSnackbar();\r\n  const save = (input) => {\r\n    const { title, connect, ...config } = input;\r\n    if (!title) return alert('You must enter a Connection Name');\r\n    const configs = getConfigs();\r\n    Object.assign(configs, { [title]: { ...config, connect } });\r\n    setConfigs(configs);\r\n    console.log({ configs });\r\n    !!connect && openDb(config);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    document.title = 'Ratchet-UI Demo Project';\r\n    const conf = localStorage.getItem('config');\r\n    const confs = getConfigs();\r\n    console.log({ conf, confs });\r\n    if (!conf) return console.log('no conf');\r\n    setSettings(JSON.parse(conf));\r\n    if (!confs) return console.log('no confs');\r\n    setState({ ...state, configs: confs });\r\n  }, []);\r\n\r\n  const openDb = async (s) => {\r\n    changeState('busy', !0);\r\n    const res = await connectToDb(s);\r\n    const tables = res.rows.map((f) => f[Object.keys(f)[0]]);\r\n    setTableNames(tables);\r\n    changeState('busy', !1);\r\n    say('Loaded ' + s.database);\r\n  };\r\n\r\n  const clearTable = () => {\r\n    if (!!tableName) {\r\n      setTableName(null);\r\n      setTable(null);\r\n      setState({\r\n        configs: getConfigs(),\r\n        sidebarOpen: state.sidebarOpen,\r\n        tableNames: state.tableNames,\r\n      });\r\n      return;\r\n    }\r\n  };\r\n\r\n  const getColumn = (columnName) => {\r\n    const is = !!state.columnName;\r\n    setState({\r\n      ...state,\r\n      selectedColumn: is\r\n        ? null\r\n        : tableDesc?.rows?.find((f) => f.COLUMN_NAME === columnName),\r\n      columnName: is ? null : columnName,\r\n    });\r\n  };\r\n\r\n  const getTable = async (s, p) => {\r\n    changeState('busy', !0);\r\n    const res = await openTable(settings, s, p);\r\n    setTableName(s);\r\n    setTable(res);\r\n    setPage(p);\r\n    const des = await describeTable(settings, s, p);\r\n    console.log(des);\r\n    setTableDesc(des);\r\n    changeState('busy', !1);\r\n  };\r\n\r\n  const execSQL = async (queryText, p = 1) => {\r\n    changeState('busy', !0);\r\n    const res = await execQuery(settings, queryText, p);\r\n    console.log(res);\r\n    setState({ ...state, queryText });\r\n    setTableName('New Query');\r\n    setTable(res);\r\n    setTableDesc({\r\n      rows: res.fields.map((f) => ({ COLUMN_NAME: f.name, DATA_TYPE: f.type })),\r\n    });\r\n    setPage(p);\r\n    changeState('busy', !1);\r\n  };\r\n\r\n  const openConnection = (key) => {\r\n    const connectionConfig = state.configs[key];\r\n    const { title, connect, ...config } = connectionConfig;\r\n    setSettings(config);\r\n    setState((s) => ({ ...s, connectionName: key }));\r\n    openDb(config);\r\n  };\r\n\r\n  const getPage = (o) => {\r\n    if (state.newQuery) {\r\n      return execSQL(state.queryText, page + o);\r\n    }\r\n    getTable(tableName, page + o);\r\n  };\r\n  const paginationParams = collate(table?.count, 100, page);\r\n  const maxWidth = '200px';\r\n\r\n  const columnListArgs = {\r\n    tableName,\r\n    state,\r\n    getColumn,\r\n    columns: tableDesc?.rows,\r\n  };\r\n\r\n  const tableListArgs = {\r\n    state,\r\n    setState,\r\n    tableName,\r\n    tableNames,\r\n    getTable,\r\n    clearTable,\r\n    setTableNames,\r\n  };\r\n\r\n  const connectionListArgs = {\r\n    state,\r\n    setState,\r\n    openConnection,\r\n  };\r\n\r\n  const connectionFormArgs = {\r\n    onSave: save,\r\n    setState: setSettings,\r\n    state: settings,\r\n  };\r\n\r\n  const queryPaneArgs = {\r\n    tableNames,\r\n    execSQL,\r\n    config: settings,\r\n    query: state.queryText,\r\n    setQuery: (w) => setState((s) => ({ ...s, queryText: w })),\r\n  };\r\n\r\n  const sidebarWidth = state.sidebarOpen ? '25%' : '64px';\r\n  const viewPaneCss = {\r\n    '--sidebar-width': sidebarWidth,\r\n    '--sidebar-min-width': state.sidebarOpen ? '356px' : '0',\r\n  };\r\n  const collapseHeight = 'calc(100vh - var(--margin-offset))';\r\n  return {\r\n    collapseHeight,\r\n    columnListArgs,\r\n    connectionFormArgs,\r\n    connectionListArgs,\r\n    getPage,\r\n    paginationParams,\r\n    queryPaneArgs,\r\n    setState,\r\n    state,\r\n    table,\r\n    tableDesc,\r\n    tableListArgs,\r\n    tableName,\r\n    tableNames,\r\n    viewPaneCss,\r\n    snackState,\r\n    say,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}